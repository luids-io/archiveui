# Makefile for release
SHELL = /bin/bash
EMPTY:=
SPACE:=$(EMPTY) $(EMPTY)
COMMA:=$(EMPTY),$(EMPTY)

ifeq (, $(shell which curl))
	$(error "No curl in $$PATH, please install")
endif


NAME:=archiveui
VERSION=$(shell git describe --match 'v[0-9]*' --dirty='.m' --always)
GITHUB_ORG:=luids-io
DOCKER_ORG:=luids
DOCKER_PLATFORMS="linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le,linux/s390x"

all:
	@echo "Use the 'release' target to build and 'github-push' or 'docker-push' to publish."

release: build tar installer

.PHONY: build
build:
	@echo Cleaning old builds
	@rm -rf build && mkdir build
	mkdir -p build/archiveui
	cp -r app bootstrap config database public resources routes build/archiveui
	cp LICENSE composer.* artisan package.json phpunit.xml server.php webpack.mix.js build/archiveui
	mkdir -p build/archiveui/vendor
	mkdir -p build/archiveui/storage/app/public
	mkdir -p build/archiveui/storage/database
	touch build/archiveui/storage/database/database.sqlite
	mkdir -p build/archiveui/storage/framework/{cache,sessions,testing,views}
	mkdir -p build/archiveui/storage/logs
	cd build/archiveui ; composer install
	cp .env.prod build/archiveui/.env
	cd build/archiveui ; php artisan migrate:install && php artisan migrate --force

.PHONY: tar
tar:
	@echo Cleaning old releases
	@rm -rf release && mkdir release
	tar -zcf release/$(NAME)_$(VERSION).tgz -C build archiveui

.PHONY: installer
installer:
	cp deployments/installer/installer_linux.sh release/installer_linux.sh
	sed -i 's/RELEASE="RELEASE"/RELEASE="$(VERSION)"/' release/installer_linux.sh

.PHONY: docker-push
docker-push:
	@echo Creating docker multiplatform and pushing images
	docker buildx build -t $(DOCKER_ORG)/archiveui -t $(DOCKER_ORG)/archiveui:$(VERSION) \
	       	--platform $(DOCKER_PLATFORMS) -f Dockerfile --push  .

.PHONY: github-push
github-push:
	@echo Releasing: $(VERSION)
	@$(eval RELEASE:=$(shell curl -s -d '{"tag_name": "v$(VERSION)", "name": "v$(VERSION)"}' -H "Authorization: token ${GITHUB_ACCESS_TOKEN}" "https://api.github.com/repos/$(GITHUB_ORG)/$(NAME)/releases" | grep -m 1 '"id"' | tr -cd '[[:digit:]]'))
	@echo ReleaseID: $(RELEASE)
	@( cd release; for asset in `ls -A *tgz installer*`; do \
	    echo $$asset; \
	    curl -o /dev/null -X POST \
	      -H "Content-Type: application/gzip" \
	      -H "Authorization: token ${GITHUB_ACCESS_TOKEN}" \
	      --data-binary "@$$asset" \
	      "https://uploads.github.com/repos/$(GITHUB_ORG)/$(NAME)/releases/$(RELEASE)/assets?name=$${asset}" ; \
	done )
	@( cd release; for asset in `ls -A *tgz installer*`; do \
	    sha256sum $$asset > $$asset.sha256; \
	done )
	@( cd release; for asset in `ls -A *sha256`; do \
	    echo $$asset; \
	    curl -o /dev/null -X POST \
	      -H "Content-Type: text/plain" \
	      -H "Authorization: token ${GITHUB_ACCESS_TOKEN}" \
	      --data-binary "@$$asset" \
	      "https://uploads.github.com/repos/$(GITHUB_ORG)/$(NAME)/releases/$(RELEASE)/assets?name=$${asset}" ; \
	done )

.PHONY: version
version:
	@echo $(VERSION)

.PHONY: clean
clean:
	rm -rf release
	rm -rf build
